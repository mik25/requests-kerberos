{"name":"DeansIPTV","tagline":"An authentication handler for using Kerberos with Python Requests.","body":"requests Kerberos/GSSAPI authentication library\r\n===============================================\r\n\r\nRequests is an HTTP library, written in Python, for human beings. This library\r\nadds optional Kerberos/GSSAPI authentication support and supports mutual\r\nauthentication. Basic GET usage:\r\n\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> import requests\r\n    >>> from requests_kerberos import HTTPKerberosAuth\r\n    >>> r = requests.get(\"http://example.org\", auth=HTTPKerberosAuth())\r\n    ...\r\n\r\nThe entire ``requests.api`` should be supported.\r\n\r\nAuthentication Failures\r\n-----------------------\r\n\r\nClient authentication failures will be communicated to the caller by returning\r\nthe 401 response.\r\n\r\nMutual Authentication\r\n---------------------\r\n\r\nBy default, ``HTTPKerberosAuth`` will require mutual authentication from the\r\nserver, and if a server emits a non-error response which cannot be\r\nauthenticated, a ``requests_kerberos.errors.MutualAuthenticationError`` will be\r\nraised. If a server emits an error which cannot be authenticated, it will be\r\nreturned to the user but with its contents and headers stripped.\r\n\r\nOPTIONAL\r\n^^^^^^^^\r\n\r\nIf you'd prefer to not require mutual authentication, you can set your\r\npreference when constructing your ``HTTPKerberosAuth`` object:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> import requests\r\n    >>> from requests_kerberos import HTTPKerberosAuth, OPTIONAL\r\n    >>> kerberos_auth = HTTPKerberosAuth(mutual_authentication=OPTIONAL)\r\n    >>> r = requests.get(\"http://example.org\", auth=kerberos_auth)\r\n    ...\r\n\r\nThis will cause ``requests_kerberos`` to attempt mutual authentication if the\r\nserver advertises that it supports it, and cause a failure if authentication\r\nfails, but not if the server does not support it at all.\r\n\r\nDISABLED\r\n^^^^^^^^\r\n\r\nWhile we don't recommend it, if you'd prefer to never attempt mutual\r\nauthentication, you can do that as well:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> import requests\r\n    >>> from requests_kerberos import HTTPKerberosAuth, DISABLED\r\n    >>> kerberos_auth = HTTPKerberosAuth(mutual_authentication=DISABLED)\r\n    >>> r = requests.get(\"http://example.org\", auth=kerberos_auth)\r\n    ...\r\n\r\nLogging\r\n-------\r\n\r\nThis library makes extensive use of Python's logging facilities.\r\n\r\nLog messages are logged to the ``requests_kerberos`` and\r\n``requests_kerberos.kerberos_`` named loggers.\r\n\r\nIf you are having difficulty we suggest you configure logging. Issues with the\r\nunderlying kerberos libraries will be made apparent. Additionally, copious debug\r\ninformation is made available which may assist in troubleshooting if you\r\nincrease your log level all the way up to debug.\r\n","google":"UA-65178389-1","note":"Don't delete this file! It's used internally to help with page regeneration."}